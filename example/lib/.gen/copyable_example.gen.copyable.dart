///##################################################
///##### Generated by copyable - Do Not Modify ######
///##################################################
part of '../copyable_example.dart';

extension AddressCopyable on Address {
  Address copyWith({String street, String city, int zipCode}) {
    return Address(
      street: street ?? this.street,
      city: city ?? this.city,
      zipCode: zipCode ?? this.zipCode,
    );
  }
}

extension UserCopyable on User {
  User copyWith({String name, int? userAge, String? email, Address? address}) {
    return User(
      id: this.id,
      name: name ?? this.name,
      age: userAge ?? this.age,
      email: email ?? this.email,
      address: address ?? this.address,
      createdAt: this.createdAt,
    );
  }

  User copyWithNull(List<String> fieldNames) {
    return User(
      id: this.id,
      name: this.name,
      age: fieldNames.contains('userAge') ? null : this.age,
      email: fieldNames.contains('email') ? null : this.email,
      address: fieldNames.contains('address') ? null : this.address,
      createdAt: this.createdAt,
    );
  }
}

extension ProfileCopyable on Profile {
  Profile copyWith({String username, List<String>? tags, Map<String, dynamic>? meta, String? bio}) {
    return Profile(
      username: username ?? this.username,
      tags: tags ?? tags?.map((e) => e).toList(),
      metadata: meta ?? metadata != null ? Map<String, dynamic>.from(metadata!) : null,
      bio: bio ?? this.bio,
    );
  }
}

mixin CopyMixin {
  Settings copyWith({String theme, bool notificationsEnabled, int? fontSize, String? language}) {
    return Settings(
      theme: theme ?? this.theme,
      notificationsEnabled: notificationsEnabled ?? this.notificationsEnabled,
      fontSize: fontSize ?? this.fontSize,
      language: language ?? this.language,
    );
  }
}

extension CompanyCopyable on Company {
  Company copyWith({String name, Address headquarters, List<String> departments}) {
    return Company(
      name: name ?? this.name,
      headquarters: headquarters ?? this.headquarters,
      departments: departments ?? this.departments,
    );
  }
}

extension EmployeeCopyable on Employee {
  Employee copyWith({
    String firstName,
    String lastName,
    String? dept,
    Company? company,
    List<String>? skills,
  }) {
    return Employee(
      employeeId: this.employeeId,
      firstName: firstName ?? this.firstName,
      lastName: lastName ?? this.lastName,
      department: dept ?? this.department,
      company: company ?? this.company,
      skills: skills ?? skills?.map((e) => e).toList(),
      hireDate: this.hireDate,
    );
  }

  Employee copyWithNull(List<String> fieldNames) {
    return Employee(
      employeeId: this.employeeId,
      firstName: this.firstName,
      lastName: this.lastName,
      department: fieldNames.contains('dept') ? null : this.department,
      company: fieldNames.contains('company') ? null : this.company,
      skills: fieldNames.contains('skills') ? null : this.skills,
      hireDate: this.hireDate,
    );
  }
}
