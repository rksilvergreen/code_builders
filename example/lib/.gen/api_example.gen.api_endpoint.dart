///##################################################
///### Generated by api_endpoint - Do Not Modify ####
///##################################################
part of '../api_example.dart';

class PostApiImpl implements PostApi {
  final String baseUrl;
  const PostApiImpl({required String this.baseUrl});
  @override
  Future<Post> getPost(int id) async {
    // Build URL
    var url = baseUrl + '/posts/{id}'.replaceAll('{id}', id.toString());

    // Build headers
    final headers = <String, String>{};
    headers['Accept'] = 'application/json';

    // Make HTTP request
    // In a real implementation, this would use the http package
    // For now, returning mock response

    // Parse response (mock)
    final responseData = <String, dynamic>{};
    return Future(
      id: responseData['id'] as int,
      title: responseData['title'] as String,
      content: responseData['content'] as String,
      createdAt: DateTime.parse(responseData['created_at']),
    );
  }
}

class CreatePostApiImpl implements CreatePostApi {
  final String baseUrl;
  final String? token;
  const CreatePostApiImpl({required String this.baseUrl, String? this.token});
  @override
  Future<Post> createPost(int userId, CreatePostRequest request) async {
    // Build URL
    var url = baseUrl + '/users/{userId}/posts'.replaceAll('{userId}', userId.toString());

    // Build headers
    final headers = <String, String>{};
    headers['Content-Type'] = 'application/json';
    headers['Authorization'] = 'Bearer $token';
    headers['X-Timestamp'] = DateTime.now().toIso8601String();

    // Build request body
    final body = {'title': request.title, 'content': request.content, 'tags': request.tags};

    // Make HTTP request
    // In a real implementation, this would use the http package
    // For now, returning mock response

    // Parse response (mock)
    final responseData = <String, dynamic>{};
    return Future(
      id: responseData['post_id'] as int,
      title: responseData['title'] as String,
      content: responseData['content'] as String,
      createdAt: DateTime.parse(responseData['created_at']),
    );
  }
}

class PostListApiImpl implements PostListApi {
  final String baseUrl;
  const PostListApiImpl({required String this.baseUrl});
  @override
  Future<PostList> getPosts({int? page, int? limit, String? search, bool? published}) async {
    // Build URL
    var url = baseUrl + '/posts';

    // Add query parameters
    final queryParams = <String, String>{};
    queryParams['page'] = (page ?? 1).toString();
    queryParams['limit'] = (limit ?? 10).toString();
    if (search != null) queryParams['search'] = search.toString();
    if (published != null) queryParams['published'] = published.toString();
    if (queryParams.isNotEmpty) {
      url += '?' + queryParams.entries.map((e) => '${e.key}=${e.value}').join('&');
    }

    // Build headers
    final headers = <String, String>{};
    headers['Accept'] = 'application/json';

    // Make HTTP request
    // In a real implementation, this would use the http package
    // For now, returning mock response

    // Parse response (mock)
    final responseData = <String, dynamic>{};
    return Future(
      posts: responseData['posts'] as List<Post>,
      total: responseData['total_count'] as int,
      page: responseData['current_page'] as int,
    );
  }
}

class UserApiImpl implements UserApi {
  final String baseUrl;
  final String? token;
  const UserApiImpl({required String this.baseUrl, String? this.token});
  @override
  Future<User> updateUser(
    int userId,
    UpdateUserRequest request, {
    bool? notify,
    required String apiKey,
  }) async {
    // Build URL
    var url = baseUrl + '/users/{userId}'.replaceAll('{userId}', userId.toString());

    // Add query parameters
    final queryParams = <String, String>{};
    queryParams['notify'] = (notify ?? true).toString();
    if (queryParams.isNotEmpty) {
      url += '?' + queryParams.entries.map((e) => '${e.key}=${e.value}').join('&');
    }

    // Build headers
    final headers = <String, String>{};
    headers['Content-Type'] = 'application/json';
    headers['Authorization'] = 'Bearer $token';
    headers['X-API-Key'] = '{apiKey}';
    headers['X-Timestamp'] = DateTime.now().toIso8601String();

    // Build request body
    final body = {
      'name': request.name,
      'email_address': request.email,
      'settings': request.settings,
    };

    // Make HTTP request
    // In a real implementation, this would use the http package
    // For now, returning mock response

    // Parse response (mock)
    final responseData = <String, dynamic>{};
    return Future(
      id: responseData['user_id'] as int,
      email: responseData['email_address'] as String,
      name: responseData['full_name'] as String,
      lastLogin: DateTime.parse(responseData['last_login_at']),
    );
  }
}
